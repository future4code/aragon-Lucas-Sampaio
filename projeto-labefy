modulo2/projeto-labefy/projeto-labefy/package.json
{
  "name": "projeto-labefy",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^12.1.4",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.26.1",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.0",
    "styled-components": "^5.3.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
 BIN +3.78 KB 
 
 modulo2/projeto-labefy/projeto-labefy/public/favicon.ico
 <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.
      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

modulo2/projeto-labefy/projeto-labefy/public/logo192.png

modulo2/projeto-labefy/projeto-labefy/public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

modulo2/projeto-labefy/projeto-labefy/src/App.js
import React, { Component } from 'react'
import axios from 'axios'
import CriarPlaylist from './Compoents/CriarPlaylist'
import DetalhesPlaylist from './Compoents/DetalhesPlaylist'
import ListaDePlaylist from './Compoents/ListaDePlaylist'
import { createGlobalStyle } from 'styled-components'

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    padding: 0;
  }
`;


export default class App extends React.Component {

    state = {
      page: "AdicionarPlaylist",
      idPlaylist: '',
      namePlaylist: ''
    }

    renderPage = () => {
      switch (this.state.page) {
        case "AdicionarPlaylist":
          return <CriarPlaylist paginaListaPlaylist={this.paginaListaPlaylist}/>
        case "ListaPlaylist":
          return <ListaDePlaylist paginaCriarPlaylist={this.paginaCriarPlaylist} paginaDetalhesPlaylist={this.paginaDetalhesPlaylist}/>
        case "DetalhePlaylist":
          return <DetalhesPlaylist 
              paginaCriarPlaylist={this.paginaCriarPlaylist}
              paginaListaPlaylist={this.paginaListaPlaylist}
              idPlaylist={this.state.idPlaylist}
              namePlaylist={this.state.namePlaylist}
              />

      }
    }

  paginaDetalhesPlaylist = (id, name) => {
    this.setState({
      page: 'DetalhePlaylist',
      idPlaylist: id,
      namePlaylist: name
    })
  }

  paginaCriarPlaylist = () =>{
    this.setState({
      page: 'AdicionarPlaylist'
    })
  }

  paginaListaPlaylist = () =>{
    this.setState({
      page: 'ListaPlaylist'
    })
  }
